@model MadeInCanadaForum.Models.Discussion
@using MadeInCanadaForum.Models

@{
    ViewData["Title"] = Model.Title;

    async Task RenderComment(Comment comment, int depth = 0)
    {
        <div class="comment @(depth > 0 ? "ms-4" : "")" style="border-left: 2px solid #dee2e6; padding-left: 1rem; margin-bottom: 1rem;">
            <div class="d-flex align-items-start gap-2 mb-2">
                <a asp-controller="Home" asp-action="Profile" asp-route-id="@comment.ApplicationUserId" class="text-decoration-none">
                    @if (!string.IsNullOrEmpty(comment.ApplicationUser?.ImageFilename))
                    {
                        <img src="~/photos/@comment.ApplicationUser.ImageFilename" alt="Profile" class="rounded-circle" style="width: 32px; height: 32px; object-fit: cover;" />
                    }
                    else
                    {
                        <img src="~/images/profile-placeholder.png" alt="Profile" class="rounded-circle" style="width: 32px; height: 32px; object-fit: cover;" />
                    }
                </a>
                <div class="flex-grow-1">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <a asp-controller="Home" asp-action="Profile" asp-route-id="@comment.ApplicationUserId" class="text-decoration-none">
                                <strong>@comment.ApplicationUser?.Name</strong>
                            </a>
                            <small class="text-muted ms-2">@comment.CreateDate.ToString("MMM dd, yyyy HH:mm")</small>
                        </div>
                        @if (User.Identity?.Name == comment.ApplicationUser?.UserName)
                        {
                            <div>
                                <a asp-controller="Comments" asp-action="Edit" asp-route-id="@comment.CommentId" class="btn btn-sm btn-outline-primary">Edit</a>
                                <a asp-controller="Comments" asp-action="Delete" asp-route-id="@comment.CommentId" class="btn btn-sm btn-outline-danger">Delete</a>
                            </div>
                        }
                    </div>
                    <p class="mb-2">@comment.Content</p>
                    <div class="d-flex gap-3 align-items-center">
                        <form asp-controller="Comments" asp-action="Vote" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@comment.CommentId" />
                            <input type="hidden" name="isUpvote" value="true" />
                            <button type="submit" class="btn btn-sm btn-outline-success">
                                <i class="bi bi-hand-thumbs-up"></i>
                                <span>@comment.UpVotes</span>
                            </button>
                        </form>
                        <form asp-controller="Comments" asp-action="Vote" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@comment.CommentId" />
                            <input type="hidden" name="isUpvote" value="false" />
                            <button type="submit" class="btn btn-sm btn-outline-danger">
                                <i class="bi bi-hand-thumbs-down"></i>
                                <span>@comment.DownVotes</span>
                            </button>
                        </form>
                        <button class="btn btn-sm btn-outline-secondary reply-button" data-comment-id="@comment.CommentId">
                            <i class="bi bi-reply"></i> Reply
                        </button>
                    </div>
                    <div id="reply-form-@comment.CommentId" class="reply-form mt-3" style="display: none;">
                        <form asp-controller="Comments" asp-action="Create" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="DiscussionId" value="@Model.DiscussionId" />
                            <input type="hidden" name="ParentCommentId" value="@comment.CommentId" />
                            <div class="form-group">
                                <textarea name="Content" class="form-control" rows="3" required></textarea>
                            </div>
                            <div class="mt-2">
                                <button type="submit" class="btn btn-primary">Submit Reply</button>
                                <button type="button" class="btn btn-secondary cancel-reply" data-comment-id="@comment.CommentId">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            @if (comment.Replies != null && comment.Replies.Any())
            {
                foreach (var reply in comment.Replies.OrderBy(r => r.CreateDate))
                {
                    await RenderComment(reply, depth + 1);
                }
            }
        </div>
    }
}

<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            <div class="d-flex align-items-start gap-3 mb-4">
                <a asp-controller="Home" asp-action="Profile" asp-route-id="@Model.ApplicationUserId" class="text-decoration-none">
                    @if (!string.IsNullOrEmpty(Model.ApplicationUser?.ImageFilename))
                    {
                        <img src="~/photos/@Model.ApplicationUser.ImageFilename" alt="Profile" class="rounded-circle" style="width: 64px; height: 64px; object-fit: cover;" />
                    }
                    else
                    {
                        <img src="~/images/profile-placeholder.png" alt="Profile" class="rounded-circle" style="width: 64px; height: 64px; object-fit: cover;" />
                    }
                </a>
                <div class="flex-grow-1">
                    <h1 class="card-title mb-1">@Model.Title</h1>
                    <div class="d-flex align-items-center gap-2 text-muted mb-3">
                        <a asp-controller="Home" asp-action="Profile" asp-route-id="@Model.ApplicationUserId" class="text-decoration-none">
                            <strong>@Model.ApplicationUser?.Name</strong>
                        </a>
                        <span>•</span>
                        <small>@Model.CreateDate.ToString("MMM dd, yyyy HH:mm")</small>
                    </div>
                    <p class="card-text">@Model.Content</p>
                    @if (!string.IsNullOrEmpty(Model.ImageFilename))
                    {
                        <img src="~/photos/@Model.ImageFilename" alt="Discussion Image" class="img-fluid rounded mb-3" style="max-height: 400px; width: auto;" />
                    }
                </div>
            </div>

            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="mb-4">
                    <h4>Add a Comment</h4>
                    <form asp-controller="Comments" asp-action="Create" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="DiscussionId" value="@Model.DiscussionId" />
                        <div class="form-group">
                            <textarea name="Content" class="form-control" rows="3" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary mt-2">Submit Comment</button>
                    </form>
                </div>
            }

            <div class="comments-section">
                <h4>Comments</h4>
                @foreach (var comment in Model.Comments?.Where(c => c.ParentCommentId == null).OrderBy(c => c.CreateDate).ToList() ?? new List<Comment>())
                {
                    await RenderComment(comment);
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Reply button click handlers
            document.querySelectorAll('.reply-button').forEach(button => {
                button.addEventListener('click', function() {
                    const commentId = this.dataset.commentId;
                    document.querySelector(`#reply-form-${commentId}`).style.display = 'block';
                });
            });

            // Cancel reply button click handlers
            document.querySelectorAll('.cancel-reply').forEach(button => {
                button.addEventListener('click', function() {
                    const commentId = this.dataset.commentId;
                    document.querySelector(`#reply-form-${commentId}`).style.display = 'none';
                });
            });
        });
    </script>
}
